.. _introduction:

Introduction
============

Exawind-builder is a set of bash functions that can be compiled to generate
build scripts for the software used in `ExaWind <https://www.exawind.org>`_
project on the different systems of interest. It separates machine-specific
configuration from the software-specific configuration (tracking library
dependencies and CMake configuration) so that they can be modularized and
combined for different systems and compilers. The bash functions are grouped in
the following three categories:

**core**

  This contains the core set of functions that are software and
  platform agnostic and are used in end-user scripts and other scripts.

**envs**

  Contains scripts for each HPC platform and loads the apporpriate
  modules (either via system modules or through spack) based on the target
  compiler specified by the user. Configurations are available for the following
  systems:

  ================= ============================================================================================
  ``spack``          `Spack <https:://github.com/LLNL/spack>`_ (system agnostic)
  ``peregrine``      `NREL Peregrine <https://www.nrel.gov/hpc/peregrine-system.html>`_
  ``cori``           `NERSC Cori <http://www.nersc.gov/users/computational-systems/cori/>`_
  ``summitdev``      `OLCF SummitDev <https://www.olcf.ornl.gov/olcf-resources/compute-systems/summit/>`_
  ``snl-ascicgpu``   Sandia ASC GPU development machines
  ``rhodes``         NREL nightly build and test system
  ================= ============================================================================================

  The following compilers are configured for each machine

  =============== ========================
  Environment     Compilers
  =============== ========================
  peregrine       gcc, intel
  cori            intel
  summitdev       gcc, xl, cuda
  snl-ascicgpu    gcc, cuda
  Mac OSX         clang, gcc
  =============== ========================


**codes**

  Contains default configurations for the following codes:

  ==================== =================================================
  Nalu-Wind            https://github.com/exawind/nalu-wind.git
  Trilinos             https://github.com/trilinos/trilinos.git
  OpenFAST             https://github.com/openfast/openfast.git
  Nalu Wind Utilities  https://github.com/exawind/wind-utils.git
  TIOGA                https://github.com/jsitaraman/tioga.git
  TIOGA Utilities      https://github.com/sayerhs/tioga_utils.git
  HYPRE                https://github.com/LLNL/hypre.git
  ==================== =================================================


The end-user build scripts are generated by combining the core functions with a
specific instance of machine and code configuration. ``exawind-builder``
provides a utility to automate the generation of these scripts -- see
:ref:`new-script` for more details.


Use cases
---------

The scripts provide capability for three different workflows of increasing complexity:

#. The simplest use case is on a system where all the dependencies are managed
   by the ExaWind team (e.g., NREL Peregrine, NERSC Cori, etc.). In this
   scenario, the user just needs to clone the appropriate code repo and use the
   build script to compile their desired branch with apporpriate CMake options.
   This use case is described in :ref:`basic_usage` section.

#. Depending on the task, users might need to use different branch of a
   third-party library (TPL). For example, user might need a different branch of
   OpenFAST or TIOGA when developing a new feature within Nalu-Wind. This will
   require the user to maintain multiple development builds of the codes and
   keep them all in sync. :ref:`build-customization` provides information on how to
   manage this workflow.

#. Finally, the user might need to install and manage all dependencies
   themselves, e.g., on their personal laptops. :ref:`advanced_usage` details
   all the necessary steps to setup your own ExaWind environment and manage all
   dependencies on different machines. This mimics the `build-test
   <https://github.com/Exawind/build-test>`_ infrastructure of ExaWind project,
   but opts to use system configuration as much as possible to minimize build
   time on dependencies.
